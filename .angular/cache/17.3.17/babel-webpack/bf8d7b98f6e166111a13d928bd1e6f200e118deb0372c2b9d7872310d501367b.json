{"ast":null,"code":"import _asyncToGenerator from \"/Users/shijas/works/sr-token-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n/**\n *  Events allow for applications to use the observer pattern, which\n *  allows subscribing and publishing events, outside the normal\n *  execution paths.\n *\n *  @_section api/utils/events:Events  [about-events]\n */\nimport { defineProperties } from \"./properties.js\";\n/**\n *  When an [[EventEmitterable]] triggers a [[Listener]], the\n *  callback always ahas one additional argument passed, which is\n *  an **EventPayload**.\n */\nexport class EventPayload {\n  /**\n   *  The event filter.\n   */\n  filter;\n  /**\n   *  The **EventEmitterable**.\n   */\n  emitter;\n  #listener;\n  /**\n   *  Create a new **EventPayload** for %%emitter%% with\n   *  the %%listener%% and for %%filter%%.\n   */\n  constructor(emitter, listener, filter) {\n    this.#listener = listener;\n    defineProperties(this, {\n      emitter,\n      filter\n    });\n  }\n  /**\n   *  Unregister the triggered listener for future events.\n   */\n  removeListener() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.#listener == null) {\n        return;\n      }\n      yield _this.emitter.off(_this.filter, _this.#listener);\n    })();\n  }\n}\n//# sourceMappingURL=events.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}