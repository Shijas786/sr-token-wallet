{"ast":null,"code":"import _asyncToGenerator from \"/Users/shijas/works/sr-token-wallet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { assertArgument, makeError } from \"../utils/index.js\";\nimport { JsonRpcApiPollingProvider } from \"./provider-jsonrpc.js\";\n;\n/**\n *  A **BrowserProvider** is intended to wrap an injected provider which\n *  adheres to the [[link-eip-1193]] standard, which most (if not all)\n *  currently do.\n */\nexport class BrowserProvider extends JsonRpcApiPollingProvider {\n  #request;\n  #providerInfo;\n  /**\n   *  Connect to the %%ethereum%% provider, optionally forcing the\n   *  %%network%%.\n   */\n  constructor(ethereum, network, _options) {\n    var _this;\n    // Copy the options\n    const options = Object.assign({}, _options != null ? _options : {}, {\n      batchMaxCount: 1\n    });\n    assertArgument(ethereum && ethereum.request, \"invalid EIP-1193 provider\", \"ethereum\", ethereum);\n    super(network, options);\n    _this = this;\n    this.#providerInfo = null;\n    if (_options && _options.providerInfo) {\n      this.#providerInfo = _options.providerInfo;\n    }\n    this.#request = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (method, params) {\n        const payload = {\n          method,\n          params\n        };\n        _this.emit(\"debug\", {\n          action: \"sendEip1193Request\",\n          payload\n        });\n        try {\n          const result = yield ethereum.request(payload);\n          _this.emit(\"debug\", {\n            action: \"receiveEip1193Result\",\n            result\n          });\n          return result;\n        } catch (e) {\n          const error = new Error(e.message);\n          error.code = e.code;\n          error.data = e.data;\n          error.payload = payload;\n          _this.emit(\"debug\", {\n            action: \"receiveEip1193Error\",\n            error\n          });\n          throw error;\n        }\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n  get providerInfo() {\n    return this.#providerInfo;\n  }\n  send(method, params) {\n    var _superprop_getSend = () => super.send,\n      _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2._start();\n      return yield _superprop_getSend().call(_this2, method, params);\n    })();\n  }\n  _send(payload) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      assertArgument(!Array.isArray(payload), \"EIP-1193 does not support batch request\", \"payload\", payload);\n      try {\n        const result = yield _this3.#request(payload.method, payload.params || []);\n        return [{\n          id: payload.id,\n          result\n        }];\n      } catch (e) {\n        return [{\n          id: payload.id,\n          error: {\n            code: e.code,\n            data: e.data,\n            message: e.message\n          }\n        }];\n      }\n    })();\n  }\n  getRpcError(payload, error) {\n    error = JSON.parse(JSON.stringify(error));\n    // EIP-1193 gives us some machine-readable error codes, so rewrite\n    // them into Ethers standard errors.\n    switch (error.error.code || -1) {\n      case 4001:\n        error.error.message = `ethers-user-denied: ${error.error.message}`;\n        break;\n      case 4200:\n        error.error.message = `ethers-unsupported: ${error.error.message}`;\n        break;\n    }\n    return super.getRpcError(payload, error);\n  }\n  /**\n   *  Resolves to ``true`` if the provider manages the %%address%%.\n   */\n  hasSigner(address) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      if (address == null) {\n        address = 0;\n      }\n      const accounts = yield _this4.send(\"eth_accounts\", []);\n      if (typeof address === \"number\") {\n        return accounts.length > address;\n      }\n      address = address.toLowerCase();\n      return accounts.filter(a => a.toLowerCase() === address).length !== 0;\n    })();\n  }\n  getSigner(address) {\n    var _superprop_getGetSigner = () => super.getSigner,\n      _this5 = this;\n    return _asyncToGenerator(function* () {\n      if (address == null) {\n        address = 0;\n      }\n      if (!(yield _this5.hasSigner(address))) {\n        try {\n          yield _this5.#request(\"eth_requestAccounts\", []);\n        } catch (error) {\n          const payload = error.payload;\n          throw _this5.getRpcError(payload, {\n            id: payload.id,\n            error\n          });\n        }\n      }\n      return yield _superprop_getGetSigner().call(_this5, address);\n    })();\n  }\n  /**\n   *  Discover and connect to a Provider in the Browser using the\n   *  [[link-eip-6963]] discovery mechanism. If no providers are\n   *  present, ``null`` is resolved.\n   */\n  static discover(options) {\n    return _asyncToGenerator(function* () {\n      if (options == null) {\n        options = {};\n      }\n      if (options.provider) {\n        return new BrowserProvider(options.provider);\n      }\n      const context = options.window ? options.window : typeof window !== \"undefined\" ? window : null;\n      if (context == null) {\n        return null;\n      }\n      const anyProvider = options.anyProvider;\n      if (anyProvider && context.ethereum) {\n        return new BrowserProvider(context.ethereum);\n      }\n      if (!(\"addEventListener\" in context && \"dispatchEvent\" in context && \"removeEventListener\" in context)) {\n        return null;\n      }\n      const timeout = options.timeout ? options.timeout : 300;\n      if (timeout === 0) {\n        return null;\n      }\n      return yield new Promise((resolve, reject) => {\n        let found = [];\n        const addProvider = event => {\n          found.push(event.detail);\n          if (anyProvider) {\n            finalize();\n          }\n        };\n        const finalize = () => {\n          clearTimeout(timer);\n          if (found.length) {\n            // If filtering is provided:\n            if (options && options.filter) {\n              // Call filter, with a copies of found provider infos\n              const filtered = options.filter(found.map(i => Object.assign({}, i.info)));\n              if (filtered == null) {\n                // No provider selected\n                resolve(null);\n              } else if (filtered instanceof BrowserProvider) {\n                // Custom provider created\n                resolve(filtered);\n              } else {\n                // Find the matching provider\n                let match = null;\n                if (filtered.uuid) {\n                  const matches = found.filter(f => filtered.uuid === f.info.uuid);\n                  // @TODO: What should happen if multiple values\n                  //        for the same UUID?\n                  match = matches[0];\n                }\n                if (match) {\n                  const {\n                    provider,\n                    info\n                  } = match;\n                  resolve(new BrowserProvider(provider, undefined, {\n                    providerInfo: info\n                  }));\n                } else {\n                  reject(makeError(\"filter returned unknown info\", \"UNSUPPORTED_OPERATION\", {\n                    value: filtered\n                  }));\n                }\n              }\n            } else {\n              // Pick the first found provider\n              const {\n                provider,\n                info\n              } = found[0];\n              resolve(new BrowserProvider(provider, undefined, {\n                providerInfo: info\n              }));\n            }\n          } else {\n            // Nothing found\n            resolve(null);\n          }\n          context.removeEventListener(\"eip6963:announceProvider\", addProvider);\n        };\n        const timer = setTimeout(() => {\n          finalize();\n        }, timeout);\n        context.addEventListener(\"eip6963:announceProvider\", addProvider);\n        context.dispatchEvent(new Event(\"eip6963:requestProvider\"));\n      });\n    })();\n  }\n}\n//# sourceMappingURL=provider-browser.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}